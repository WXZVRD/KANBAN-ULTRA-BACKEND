import {
  Injectable,
  CanActivate,
  ExecutionContext,
  UnauthorizedException,
  Inject,
  Logger,
} from "@nestjs/common";
import { Request } from "express";
import { IUserService } from "../../user/services/user.service";
import { User } from "../../user/entity/user.entity";

@Injectable()
export class AuthGuard implements CanActivate {
  private readonly logger = new Logger(AuthGuard.name);

  constructor(
    @Inject("IUserService")
    private readonly userService: IUserService,
  ) {}

  public async canActivate(context: ExecutionContext): Promise<boolean> {
    const request: any = context.switchToHttp().getRequest<Request>();

    this.logger.debug("=== AuthGuard triggered ===");

    if (typeof request.session === "undefined") {
      this.logger.warn("‚ùå –ù–µ—Ç request.session");
      throw new UnauthorizedException(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
      );
    }

    this.logger.debug(
      `‚úî –°–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${JSON.stringify(request.session)}`,
    );

    const userId = request.session.userId;
    this.logger.debug(`üìå userId –∏–∑ —Å–µ—Å—Å–∏–∏: ${userId}`);
    this.logger.debug(`üìå request.user –∏–∑ —Å–µ—Å—Å–∏–∏: ${request.session.user}`);
    this.logger.debug(
      `üìå request –∏–∑ —Å–µ—Å—Å–∏–∏: ${JSON.stringify(request.session)}`,
    );

    if (!userId) {
      this.logger.warn("‚ùå –í —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç userId");
      // throw new UnauthorizedException("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
    }

    const user: User | null = await this.userService.findById(userId);
    this.logger.debug(
      user
        ? `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${JSON.stringify(user)}`
        : "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    );

    if (!user) {
      this.logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id=${userId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      throw new UnauthorizedException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    request.user = user;
    this.logger.debug(
      `‚úî request.user —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${JSON.stringify(request.user)}`,
    );

    this.logger.debug("=== AuthGuard –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ ===");

    return true;
  }
}
